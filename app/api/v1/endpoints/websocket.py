from fastapi import WebSocket, Depends, APIRouter, WebSocketDisconnect
from app.core.security import get_current_user_ws
from app.services.websocket_service.websokcet_manager import manager
import asyncio
import logging

logger = logging.getLogger("app")

router = APIRouter()


@router.websocket("/generate-beat")
async def websocket_endpoint(ws: WebSocket, user_email: str = Depends(get_current_user_ws)):
    try:
        logger.info("üîÑ WebSocket connection attempt for user: %s", user_email)
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        await manager.connect(user_email, ws)
        logger.info("‚úÖ WebSocket connection established for user: %s", user_email)
        while True:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è,
            # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
            await asyncio.sleep(1)
    except WebSocketDisconnect:
        manager.disconnect(user_email, ws)
        logger.warning("üîå WebSocket disconnected for user: %s", user_email)
    except Exception as e:
        logger.error("‚ùå WebSocket error: %s", e)


